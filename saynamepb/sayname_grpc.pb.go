// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package saynamepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SayNameServiceClient is the client API for SayNameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SayNameServiceClient interface {
	SayName(ctx context.Context, in *SayNameRequest, opts ...grpc.CallOption) (*SayNameResponse, error)
}

type sayNameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSayNameServiceClient(cc grpc.ClientConnInterface) SayNameServiceClient {
	return &sayNameServiceClient{cc}
}

func (c *sayNameServiceClient) SayName(ctx context.Context, in *SayNameRequest, opts ...grpc.CallOption) (*SayNameResponse, error) {
	out := new(SayNameResponse)
	err := c.cc.Invoke(ctx, "/mygrpc.SayNameService/sayName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SayNameServiceServer is the server API for SayNameService service.
// All implementations must embed UnimplementedSayNameServiceServer
// for forward compatibility
type SayNameServiceServer interface {
	SayName(context.Context, *SayNameRequest) (*SayNameResponse, error)
	mustEmbedUnimplementedSayNameServiceServer()
}

// UnimplementedSayNameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSayNameServiceServer struct {
}

func (UnimplementedSayNameServiceServer) SayName(context.Context, *SayNameRequest) (*SayNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayName not implemented")
}
func (UnimplementedSayNameServiceServer) mustEmbedUnimplementedSayNameServiceServer() {}

// UnsafeSayNameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SayNameServiceServer will
// result in compilation errors.
type UnsafeSayNameServiceServer interface {
	mustEmbedUnimplementedSayNameServiceServer()
}

func RegisterSayNameServiceServer(s grpc.ServiceRegistrar, srv SayNameServiceServer) {
	s.RegisterService(&SayNameService_ServiceDesc, srv)
}

func _SayNameService_SayName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayNameServiceServer).SayName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mygrpc.SayNameService/sayName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayNameServiceServer).SayName(ctx, req.(*SayNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SayNameService_ServiceDesc is the grpc.ServiceDesc for SayNameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SayNameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mygrpc.SayNameService",
	HandlerType: (*SayNameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sayName",
			Handler:    _SayNameService_SayName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "saynamepb/sayname.proto",
}
